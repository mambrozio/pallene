#!/usr/bin/env lua

local argparse = require "argparse"
local inspect = require "inspect"

local driver = require "pallene.driver"
local ir = require "pallene.ir"
local print_ir = require "pallene.print_ir"
local util = require "pallene.util"

local p = argparse("pallenec", "Pallene compiler")
p:argument("source_file", "File to compile")
p:flag("--emit-c", "Generate a .c file instead of an .so file")
p:flag("--emit-asm", "Generate a .s file instead of an .so file")
p:flag("--compile-c", "Compile a .c file generated by --emit-c")
p:option("--dump", "Print the result of an internal compiler pass"):choices(
          {"ast", "checker", "ir", "uninitialized", "constant_propagation"})
p:flag("--print-ir", "Show a human-readable version of the program's IR")
local args = p:parse()

-- For compilation errors that don't happen inside a source file.
-- Inspired by gcc, eg. "gcc: fatal error: no input files".
local compiler_name = arg[0]

local function pallenec_abort(fmt, ...)
    return util.abort(compiler_name .. ": " .. string.format(fmt, ...))
end

local function compile(in_ext, out_ext)
    local ok, errs = driver.compile(
        compiler_name, in_ext, out_ext, args.source_file)
    if not ok then
        util.abort(table.concat(errs, "\n"))
    end
end

local function process_item(item, path)
    if path[#path] ~= inspect.METATABLE and path[#path] ~= "loc" then
        return item
    end
end

local function compile_internal(filename, stop_after)
    local out, errs = driver.compile_internal(filename, stop_after)
    if not out then
        util.abort(table.concat(errs, "\n"))
    end
    print(inspect(out, {process = process_item}))
    util.abort(string.format("Exit after %s step", stop_after))
end

local function pretty_print_ir(filename)
    local module, errs = driver.compile_internal(filename, "ir")
    if not module then util.abort(table.concat(errs, "\n")) end
    io.stdout:write(print_ir(module))
end

local flags = {}
if args.emit_c    then table.insert(flags, "--emit-c") end
if args.emit_asm  then table.insert(flags, "--emit-asm") end
if args.compile_c then table.insert(flags, "--compile-c") end
if args.dump      then table.insert(flags, "--dump") end
if args.print_ir  then table.insert(flags, "--print_ir") end

if #flags >= 2 then
    local conflicting = table.concat(flags, " and ")
    pallenec_abort("flags %s are mutually exclusive", conflicting)
end

if     #flags == 0    then compile("pln", "so")
elseif args.emit_c    then compile("pln", "c")
elseif args.emit_asm  then compile("c",   "s")
elseif args.compile_c then compile("c" ,  "so")
elseif args.dump      then compile_internal(args.source_file, args.dump)
elseif args.print_ir  then pretty_print_ir(args.source_file)
else
    error("impossible")
end
